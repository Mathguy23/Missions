[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''  chosen = _challenge_chosen
} or nil,'''
position = 'at'
payload = '''chosen = _challenge_chosen
} or {
    label = localize('b_missions'),
    tab_definition_function = G.UIDEF.missions,
    tab_definition_function_args = from_game_over,
},
G.STAGE == G.STAGES.MAIN_MENU and {
    label = localize('b_missions'),
    tab_definition_function = G.UIDEF.missions,
    tab_definition_function_args = from_game_over,
} or nil,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.GAME.modifiers[v.id] = true'''
position = 'after'
payload = '''if (G.PROFILES[G.SETTINGS.profile].mission_jokers) and (v.id == 'mission') then
    self.GAME.modifiers[v.id] = v.mission_id
    for i, j in ipairs(G.PROFILES[G.SETTINGS.profile].mission_jokers) do
        G.E_MANAGER:add_event(Event({
            func = function()
                local card = add_joker(j, nil)
                if v.mission_id == 2 then
                    card:set_eternal(true)
                end
                return true
            end
        }))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''self:emplace(card, nil, stay_flipped)'''
position = 'before'
payload = '''if (self == G.hand) and G.GAME and G.GAME.modifiers and (G.GAME.modifiers.mission == 1) then
    local odds = 0
    if (G.GAME.round_resets.ante >= 3) then
        odds = 0.1 + 0.018 * (G.GAME.round_resets.ante - 2)
    end
    if G.GAME and G.GAME.blind and (G.GAME.blind.name == "Scorched Acorn") and not G.GAME.blind.disabled then
        odds = odds * 1.5
    end
    if pseudorandom('hiding') < odds then
        stay_flipped = true
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:flip()'''
position = 'after'
payload = '''   if self.ability.miss_obscured and (self.facing == 'back') then
        return
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability and self.ability.perma_debuff then self.debuff = true end'''
position = 'after'
payload = '''if self.ability and self.ability.miss_obscured and (self.facing == 'front') then self.facing = 'back';self.sprite_facing = 'back' end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.FUNCS.sort_hand_value = function(e)'''
position = 'after'
payload = '''   if G.GAME and G.GAME.blind and G.GAME.blind.disable_sort and not G.GAME.blind.disabled then
    G.GAME.blind:wiggle()
    return
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.FUNCS.sort_hand_suit = function(e)'''
position = 'after'
payload = '''   if G.GAME and G.GAME.blind and G.GAME.blind.disable_sort and not G.GAME.blind.disabled then
    G.GAME.blind:wiggle()
    return
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''elseif self.config.sort == 'asc' then'''
position = 'before'
payload = '''elseif self.config.sort == 'random_sort_miss' then
    table.sort(self.cards, function (a, b) return (a.ability and a.ability.miss_index or 0) < (b.ability and b.ability.miss_index or 0) end )'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''function CardArea:sort(method)'''
position = 'after'
payload = '''   if G.GAME and G.GAME.blind and G.GAME.blind.disable_sort and (self == G.hand) and not G.GAME.blind.disabled then
    method = 'random_sort_miss'
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''disabled = self.disabled,'''
position = 'after'
payload = '''disable_sort = self.disable_sort,'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''self.disabled = blindTable.disabled'''
position = 'after'
payload = '''self.disable_sort = blindTable.disable_sort'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''elseif _c.set == 'Joker' then'''
position = 'before'
payload = '''elseif (_c.set == 'Joker') and card and card.ability and card.ability.grayscaled then
    if G.localization.descriptions.LockedJoker[_c.key] then
        localize{type = 'descriptions', key = _c.key, set = 'LockedJoker', nodes = desc_nodes, vars = specific_vars or {}}
    else
        localize{type = 'descriptions', key = 'tbd', set = 'LockedJoker', nodes = desc_nodes, vars = specific_vars or {}}
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''local badges = {}'''
position = 'after'
payload = '''if self.ability and self.ability.grayscaled then
    no_badge = nil
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''badges.card_type = card_type'''
position = 'at'
payload = '''if not self.ability or not self.ability.grayscaled then
    badges.card_type = card_type
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''chips_text = '0','''
position = 'after'
payload = '''miss_unlock_trackers = {
    per_round = {},
    skippedskip = false,
    discarded = false,
    nonfivecardhand = false,
},
miss_funds = {
    curr_dollars = 0,
},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if G.hand.highlighted[i]:is_face() then inc_career_stat('c_face_cards_played', 1) end'''
position = 'before'
payload = '''for i2, j2 in pairs(SMODS.Suits) do
    if G.GAME.modifiers.mission and G.hand.highlighted[i]:is_suit(j2.key) then
        if not G.GAME.miss_unlock_trackers.per_round[j2.key] then
            G.GAME.miss_unlock_trackers.per_round[j2.key] = 1
        else
            G.GAME.miss_unlock_trackers.per_round[j2.key] = G.GAME.miss_unlock_trackers.per_round[j2.key] + 1
        end
        local amt = G.GAME.miss_unlock_trackers.per_round[j2.key]
        if amt >= 25 then
            if j2.key == "Spades" then
                unlock_party_joker('j_wrathful_joker')
            elseif j2.key == "Hearts" then
                unlock_party_joker('j_lusty_joker')
            elseif j2.key == "Clubs" then
                unlock_party_joker('j_gluttenous_joker')
            elseif j2.key == "Diamonds" then
                unlock_party_joker('j_greedy_joker')
            end
        end
    end
end
if G.GAME.modifiers.mission and not G.hand.highlighted[i]:is_face(true) then
    if not G.GAME.miss_unlock_trackers.per_round['nonface'] then
        G.GAME.miss_unlock_trackers.per_round['nonface'] = 1
    else
        G.GAME.miss_unlock_trackers.per_round['nonface'] = G.GAME.miss_unlock_trackers.per_round['nonface'] + 1
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''local game_over = true'''
position = 'before'
payload = '''if G.GAME.blind and G.GAME.blind.name == 'The Plant' then
    if (G.GAME.miss_unlock_trackers.per_round['nonface'] == nil) or (G.GAME.miss_unlock_trackers.per_round['nonface'] == 0) then
        unlock_party_joker('j_pareidolia')
    end
end
G.GAME.miss_unlock_trackers.per_round = {}
G.GAME.miss_round_update = true'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.GAME.facing_blind = true'''
position = 'before'
payload = '''if G.GAME.round_resets.blind_tags[G.GAME.blind_on_deck] then
    G.GAME.miss_unlock_trackers.skippedskip = true
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.discard_cards_from_highlighted = function(e, hook)'''
position = 'after'
payload = '''   G.GAME.miss_unlock_trackers.discarded = true'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''function win_game()'''
position = 'after'
payload = '''   if G.GAME.modifiers.mission then
    unlock_party_joker('j_joker')
    if not G.GAME.miss_unlock_trackers.skippedskip then
        unlock_party_joker('j_diet_cola')
    end
    if not G.GAME.miss_unlock_trackers.discarded then
        unlock_party_joker('j_delayed_grat')
    end
    if not G.GAME.miss_unlock_trackers.nonfivecardhand then
        unlock_party_joker('j_splash')
    end
    if G.GAME.round_scores.times_rerolled.amt >= 75 then
        unlock_party_joker('j_chaos')
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.GAME.dollars = G.GAME.dollars + mod'''
position = 'after'
payload = '''   if G.GAME.modifiers.mission then
    if to_big then
        if to_big(G.GAME.dollars) >= to_big(150) then
            unlock_party_joker('j_business')
        elseif to_big(G.GAME.dollars) <= to_big(-50) then
            unlock_party_joker('j_credit_card')
        end
    else
        if G.GAME.dollars >= 150 then
            unlock_party_joker('j_business')
        elseif G.GAME.dollars <= -50 then
            unlock_party_joker('j_credit_card')
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''function level_up_hand(card, hand, instant, amount)'''
position = 'after'
payload = '''   if G.GAME.modifiers.mission then
    if to_big then
        if to_big(math.max(0, G.GAME.hands[hand].level + (amount or 1))) >= to_big(40) then
            unlock_party_joker('j_space')
        end
    else
        if math.max(0, G.GAME.hands[hand].level + (amount or 1)) >= 40 then
            unlock_party_joker('j_space')
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.blind and G.boss_throw_hand and self.STATE == self.STATES.SELECTING_HAND then'''
position = 'before'
payload = '''if (G.GAME and G.GAME.modifiers and (G.GAME.modifiers.mission == 2)) and G.jokers then
    for i = 1, #G.jokers.cards do
        if G.jokers.cards[i] and not G.jokers.cards[i].ability.eternal and not G.jokers.cards[i].ability.death_timer then
            G.jokers.cards[i].ability.death_timer = 3
        end
    end
    for i = 1, #G.consumeables.cards do
        if G.consumeables.cards[i] and not G.consumeables.cards[i].ability.eternal and not G.consumeables.cards[i].ability.death_timer then
            G.consumeables.cards[i].ability.death_timer = 3
        end
    end
end
if G.GAME.miss_round_update and (#G.GAME.miss_funds > 0) then
    for i = #G.GAME.miss_funds, 1, -1 do
        G.GAME.miss_funds[i][2] = G.GAME.miss_funds[i][2] - 1
        if G.GAME.miss_funds[i][2] <= 0 then
            G.GAME.dollars = G.GAME.dollars - G.GAME.miss_funds[i][1]
            G.GAME.miss_funds.curr_dollars = G.GAME.miss_funds.curr_dollars - G.GAME.miss_funds[i][1]
            table.remove(G.GAME.miss_funds, i)
        end
    end
end
if G.GAME.miss_round_update or G.GAME.miss_hand_update then
    for i = #G.jokers.cards, 1, -1 do
        if G.jokers.cards[i] and not G.jokers.cards[i].ability.eternal and G.jokers.cards[i].ability.death_timer then
            G.jokers.cards[i].ability.death_timer = (G.jokers.cards[i].ability.death_timer or 3) - 1
            if G.jokers.cards[i].ability.death_timer == 0 then
                G.jokers.cards[i]:remove()
            end
        end
    end
    for i = #G.consumeables.cards, 1, -1 do
        if G.consumeables.cards[i] and not G.consumeables.cards[i].ability.eternal and G.consumeables.cards[i].ability.consumeable and G.consumeables.cards[i].ability.death_timer then
            G.consumeables.cards[i].ability.death_timer = (G.consumeables.cards[i].ability.death_timer or 3) - 1
            if G.consumeables.cards[i].ability.death_timer == 0 then
                G.consumeables.cards[i]:remove()
            end
        end
    end
end
G.GAME.miss_round_update = nil
G.GAME.miss_hand_update = nil
if (G.GAME and G.GAME.modifiers and (G.GAME.modifiers.mission == 2)) and (G.GAME.miss_funds.curr_dollars ~= G.GAME.dollars) then
    local change = G.GAME.dollars - G.GAME.miss_funds.curr_dollars
    G.GAME.miss_funds.curr_dollars = G.GAME.dollars
    if to_big then
        change = to_big(change)
        if change > to_big(0) then
            G.GAME.miss_funds[#G.GAME.miss_funds + 1] = {change, 3}
        else
            while (change < to_big(0)) and (#G.GAME.miss_funds > 0) do
                if -change >= to_big(G.GAME.miss_funds[#G.GAME.miss_funds][1]) then
                    change = change + G.GAME.miss_funds[#G.GAME.miss_funds][1]
                    G.GAME.miss_funds[#G.GAME.miss_funds] = nil
                else
                    G.GAME.miss_funds[#G.GAME.miss_funds][1] = to_big(G.GAME.miss_funds[#G.GAME.miss_funds][1]) + change
                    change = to_big(0)
                end
            end
        end
    else
        if change > 0 then
            G.GAME.miss_funds[#G.GAME.miss_funds + 1] = {change, 3}
        else
            while (change < 0) and (#G.GAME.miss_funds > 0) do
                if -change >= G.GAME.miss_funds[#G.GAME.miss_funds][1] then
                    change = change + G.GAME.miss_funds[#G.GAME.miss_funds][1]
                    G.GAME.miss_funds[#G.GAME.miss_funds] = nil
                else
                    G.GAME.miss_funds[#G.GAME.miss_funds][1] = G.GAME.miss_funds[#G.GAME.miss_funds][1] + change
                    change = 0
                end
            end
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''--Fill all remaining info if this is the main desc'''
position = 'before'
payload = '''if G.GAME and G.GAME.blind and (G.GAME.blind.name == "Existential Eraser") and not G.GAME.blind.disabled then
    if card and card.ability and card.ability.death_timer then info_queue[#info_queue+1] = {key = 'death_timer_hands', set = 'Other', vars = {card.ability.death_timer}} end
else
    if card and card.ability and card.ability.death_timer then info_queue[#info_queue+1] = {key = 'death_timer', set = 'Other', vars = {card.ability.death_timer}} end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.draw_from_play_to_discard()'''
position = 'after'
payload = '''if G.GAME and G.GAME.blind and (G.GAME.blind.name == "Existential Eraser") and not G.GAME.blind.disabled then
    G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = function()
            G.GAME.miss_hand_update = true
            return true
        end
    }))
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.hands[text].played = G.GAME.hands[text].played + 1'''
position = 'before'
payload = '''if #scoring_hand ~= 5 then
    G.GAME.miss_unlock_trackers.nonfivecardhand = true
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''ease_dollars(self.sell_cost)'''
position = 'after'
payload = '''local cost = self.sell_cost
G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = function()
            if cost >= 75 then
                unlock_party_joker('j_egg')
            end
            return true
        end
    }))'''
match_indent = true