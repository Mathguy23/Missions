[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''  chosen = _challenge_chosen
} or nil,'''
position = 'at'
payload = '''chosen = _challenge_chosen
} or {
    label = localize('b_missions'),
    tab_definition_function = G.UIDEF.missions,
    tab_definition_function_args = from_game_over,
},
G.STAGE == G.STAGES.MAIN_MENU and {
    label = localize('b_missions'),
    tab_definition_function = G.UIDEF.missions,
    tab_definition_function_args = from_game_over,
} or nil,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.GAME.modifiers[v.id] = true'''
position = 'after'
payload = '''if (G.PROFILES[G.SETTINGS.profile].mission_jokers) and (v.id == 'mission') then
    self.GAME.modifiers[v.id] = v.mission_id
    for i, j in ipairs(G.PROFILES[G.SETTINGS.profile].mission_jokers) do
        G.E_MANAGER:add_event(Event({
            func = function()
                local card = add_joker(j, nil)
                if v.mission_id == 2 then
                    card.ability.miss_defended = true
                end
                return true
            end
        }))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''self:emplace(card, nil, stay_flipped)'''
position = 'before'
payload = '''if (self == G.hand) and G.GAME and G.GAME.modifiers and (G.GAME.modifiers.mission == 1) then
    local odds = 0
    if (G.GAME.round_resets.ante >= 3) then
        odds = 0.1 + 0.018 * (G.GAME.round_resets.ante - 2)
    end
    if G.GAME and G.GAME.blind and (G.GAME.blind.name == "Scorched Acorn") and not G.GAME.blind.disabled then
        odds = odds * 1.5
    end
    if pseudorandom('hiding') < odds then
        stay_flipped = true
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:flip()'''
position = 'after'
payload = '''   if self.ability.miss_obscured and (self.facing == 'back') then
        return
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability and self.ability.perma_debuff then self.debuff = true end'''
position = 'after'
payload = '''if self.ability and self.ability.miss_obscured and (self.facing == 'front') then self.facing = 'back';self.sprite_facing = 'back' end
if self and self.ability and (self.ability.set == 'Tarot') and (self.area == G.consumeables) and G.GAME and G.GAME.modifiers and G.GAME.modifiers.mission and not self.ability.miss_generated then
    self.ability.miss_generated = true
    if G.GAME.facing_blind then
        if not G.GAME.miss_unlock_trackers.per_round.used_tarots then
            G.GAME.miss_unlock_trackers.per_round.used_tarots = {count = 0}
        end
        if not G.GAME.miss_unlock_trackers.per_round.used_tarots[self.config.center.key] then
            G.GAME.miss_unlock_trackers.per_round.used_tarots[self.config.center.key] = true
            G.GAME.miss_unlock_trackers.per_round.used_tarots.count = G.GAME.miss_unlock_trackers.per_round.used_tarots.count + 1
            if G.GAME.miss_unlock_trackers.per_round.used_tarots.count >= 8 then
                unlock_party_joker('j_superposition')
            end
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.FUNCS.sort_hand_value = function(e)'''
position = 'after'
payload = '''   if G.GAME and G.GAME.blind and G.GAME.blind.disable_sort and not G.GAME.blind.disabled then
    G.GAME.blind:wiggle()
    return
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.FUNCS.sort_hand_suit = function(e)'''
position = 'after'
payload = '''   if G.GAME and G.GAME.blind and G.GAME.blind.disable_sort and not G.GAME.blind.disabled then
    G.GAME.blind:wiggle()
    return
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''elseif self.config.sort == 'asc' then'''
position = 'before'
payload = '''elseif self.config.sort == 'random_sort_miss' then
    table.sort(self.cards, function (a, b) return (a.ability and a.ability.miss_index or 0) < (b.ability and b.ability.miss_index or 0) end )'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''function CardArea:sort(method)'''
position = 'after'
payload = '''   if G.GAME and G.GAME.blind and G.GAME.blind.disable_sort and (self == G.hand) and not G.GAME.blind.disabled then
    method = 'random_sort_miss'
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''disabled = self.disabled,'''
position = 'after'
payload = '''disable_sort = self.disable_sort,'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''self.disabled = blindTable.disabled'''
position = 'after'
payload = '''self.disable_sort = blindTable.disable_sort'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''elseif _c.set == 'Joker' then'''
position = 'before'
payload = '''elseif (_c.set == 'Joker') and card and card.ability and card.ability.grayscaled then
    if G.localization.descriptions.LockedJoker[_c.key] then
        localize{type = 'descriptions', key = _c.key, set = 'LockedJoker', nodes = desc_nodes, vars = specific_vars or {}}
        local texts = {'alpha', 'beta'}
        local tier = miss_joker_tiers[_c.key] or 1
        localize{type = 'descriptions', key = texts[tier] .. '_1', set = 'Other', nodes = desc_nodes}
        info_queue[#info_queue + 1] = {key = texts[tier] .. '_2', set = 'Other'}
    else
        localize{type = 'descriptions', key = 'tbd', set = 'LockedJoker', nodes = desc_nodes, vars = specific_vars or {}}
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''local badges = {}'''
position = 'after'
payload = '''if self.ability and self.ability.grayscaled then
    no_badge = nil
    if main_start and (self.ability.name == 'Misprint') then
        main_start[2].config.object:remove()
        main_start[3].config.object:remove()
    end
    main_start = nil
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''badges.card_type = card_type'''
position = 'at'
payload = '''if not self.ability or not self.ability.grayscaled then
    badges.card_type = card_type
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''chips_text = '0','''
position = 'after'
payload = '''miss_unlock_trackers = {
    per_round = {},
    skippedskip = false,
    discarded = false,
    nonfivecardhand = false,
    nofacedjokers = true,
    nopairhands = true,
    matadorcheck = true,
    nononcommonjokers = true,
    joker_purchased = false,
    jokerssold = false,
    nonfourcardhand = false,
    allpairs = true,
    allthrees = true,
    allfours = true,
    allflushes = true,
    allstraights = true,
},
joker_tooltips = {
    j_hanging_chad = {
        active = false,
        button_text = localize('b_extra_tooltips')
    },
    j_faceless = {
        active = false,
        button_text = localize('b_extra_tooltips')
    },
},
miss_funds = {
    curr_dollars = 0,
},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if G.hand.highlighted[i]:is_face() then inc_career_stat('c_face_cards_played', 1) end'''
position = 'before'
payload = '''for i2, j2 in pairs(SMODS.Suits) do
    if G.GAME.modifiers.mission and G.hand.highlighted[i]:is_suit(j2.key) then
        if not G.GAME.miss_unlock_trackers.per_round[j2.key] then
            G.GAME.miss_unlock_trackers.per_round[j2.key] = 1
        else
            G.GAME.miss_unlock_trackers.per_round[j2.key] = G.GAME.miss_unlock_trackers.per_round[j2.key] + 1
        end
        local amt = G.GAME.miss_unlock_trackers.per_round[j2.key]
        if amt >= 25 then
            if j2.key == "Spades" then
                unlock_party_joker('j_wrathful_joker')
            elseif j2.key == "Hearts" then
                unlock_party_joker('j_lusty_joker')
            elseif j2.key == "Clubs" then
                unlock_party_joker('j_gluttenous_joker')
            elseif j2.key == "Diamonds" then
                unlock_party_joker('j_greedy_joker')
            end
        end
    end
end
if G.GAME.modifiers.mission and not G.hand.highlighted[i]:is_face(true) then
    if not G.GAME.miss_unlock_trackers.per_round['nonface'] then
        G.GAME.miss_unlock_trackers.per_round['nonface'] = 1
    else
        G.GAME.miss_unlock_trackers.per_round['nonface'] = G.GAME.miss_unlock_trackers.per_round['nonface'] + 1
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''local game_over = true'''
position = 'before'
payload = '''if (G.GAME.current_round.hands_played ~= 1) and (G.GAME.blind_on_deck == "Boss") then
    G.GAME.miss_unlock_trackers.matadorcheck = nil
end
G.GAME.miss_unlock_trackers.per_round = {}
G.GAME.miss_round_update = true
if G.GAME and G.GAME.modifiers and (G.GAME.modifiers.mission == 3) then
    local infect = 0
    local pool = {}
    for i = 1, #G.playing_cards do
        if G.playing_cards[i].ability.miss_infected then
            infect = infect + 1
        else
            table.insert(pool, G.playing_cards[i])
        end
    end
    pseudoshuffle(pool, pseudoseed('spread_infection_shuffle'))
    local odds = 0.2 * (1 - (infect/ #G.playing_cards))
    local infects = 0
    for i = 1, infect do
        if pseudorandom('spread_infection') < odds then
            infects = infects + 1
        end
    end
    for i = 1, math.max(1, math.min(#pool, infects)) do
        pool[i].ability.miss_infected = true
    end
    local infect_table = {}
    for j, k in ipairs({G.jokers, G.hand}) do
        for i = 1, #k.cards do
            if k.cards[i].ability.miss_infected and (pseudorandom('spread_infection') < 0.5) then
                if i == 1 then
                    infect_table[2] = true
                elseif i == #k.cards then
                    infect_table[#k.cards - 1] = true
                elseif infect_table[i + 1] then
                    infect_table[i - 1] = true
                elseif infect_table[i - 1] then
                    infect_table[i + 1] = true
                elseif (pseudorandom('spread_direction') < 0.5) then
                    infect_table[i - 1] = true
                else
                    infect_table[i + 1] = true
                end
            elseif pseudorandom('rand_infection') < (0.015 * (G.GAME.round_resets.ante - 4)) then
                infect_table[i + 1] = true
            end
        end
        for i = 1, #k.cards do
            if infect_table[i] and not k.cards[i].ability.miss_infected then
                G.E_MANAGER:add_event(Event({
                    trigger = 'immediate',
                    func = function()
                        k.cards[i].ability.miss_infected = true
                        return true
                    end
                }))
                card_eval_status_text(k.cards[i], 'extra', nil, nil, nil, {message = localize('k_achoo'), colour = G.C.GREEN})
            end
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if game_over then'''
position = 'before'
payload = '''if not game_over and (G.GAME.chips >= G.GAME.blind.chips) and G.GAME.blind and G.GAME.blind.name == 'The Plant' then
    if (G.GAME.miss_unlock_trackers.per_round['nonface'] == nil) or (G.GAME.miss_unlock_trackers.per_round['nonface'] == 0) then
        unlock_party_joker('j_pareidolia')
    end
end
if game_over and (G.GAME.chips >= 0.99 * G.GAME.blind.chips) and (G.GAME.chips < G.GAME.blind.chips) and G.GAME.blind and ((G.GAME.blind.name == 'Scorched Acorn') or (G.GAME.blind.name == 'Existential Eraser') or (G.GAME.blind.name == 'Corrupt Pathogen')) then
    unlock_party_joker('j_mr_bones')
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.GAME.facing_blind = true'''
position = 'before'
payload = '''if G.GAME.round_resets.blind_tags[G.GAME.blind_on_deck] then
    G.GAME.miss_unlock_trackers.skippedskip = true
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.discard_cards_from_highlighted = function(e, hook)'''
position = 'after'
payload = '''   G.GAME.miss_unlock_trackers.discarded = true
    for i = 1, #G.hand.highlighted do
        for i2, j2 in pairs(SMODS.Suits) do
            if G.GAME.modifiers.mission and G.hand.highlighted[i]:is_suit(j2.key) then
                if not G.GAME.miss_unlock_trackers.per_round['discard_' .. j2.key] then
                    G.GAME.miss_unlock_trackers.per_round['discard_' .. j2.key] = 1
                else
                    G.GAME.miss_unlock_trackers.per_round['discard_' .. j2.key] = G.GAME.miss_unlock_trackers.per_round['discard_' .. j2.key] + 1
                end
                local amt = G.GAME.miss_unlock_trackers.per_round['discard_' .. j2.key]
                if amt >= 26 then
                    if j2.key == "Diamonds" then
                        unlock_party_joker('j_castle')
                    end
                end
            end
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''local Jimbo = nil'''
position = 'after'
payload = '''if G.GAME.modifiers.mission then
    unlock_party_joker('j_joker')
    if not G.GAME.miss_unlock_trackers.skippedskip then
        unlock_party_joker('j_diet_cola')
    end
    if not G.GAME.miss_unlock_trackers.discarded then
        unlock_party_joker('j_delayed_grat')
    end
    if not G.GAME.miss_unlock_trackers.nonfivecardhand then
        unlock_party_joker('j_splash')
    end
    if G.GAME.round_scores.times_rerolled.amt >= 50 then
        unlock_party_joker('j_chaos')
    end
    if G.GAME.miss_unlock_trackers.nofacedjokers then
        unlock_party_joker('j_faceless')
    end
    if G.GAME.round_scores.cards_discarded.amt >= 500 then
        unlock_party_joker('j_ramen')
    end
    if G.GAME.hands['Pair'].played >= 80 then
        unlock_party_joker('j_sly')
    end
    if G.GAME.miss_unlock_trackers.nopairhands then
        unlock_party_joker('j_jolly')
    end
    if G.GAME.miss_unlock_trackers.matadorcheck then
        unlock_party_joker('j_matador')
    end
    if G.GAME.miss_unlock_trackers.nononcommonjokers then
        unlock_party_joker('j_riff_raff')
    end
    if G.jokers and (#G.jokers.cards >= 8) then
        unlock_party_joker('j_abstract')
    end
    if not G.GAME.miss_unlock_trackers.joker_purchased then
        unlock_party_joker('j_hallucination')
    end
    if not G.GAME.miss_unlock_trackers.jokerssold then
        unlock_party_joker('j_reserved_parking')
    end
    if (G.GAME.consumeable_usage_total and G.GAME.consumeable_usage_total.tarot or 0) >= 85 then
        unlock_party_joker('j_fortune_teller')
    end
    if not G.GAME.miss_unlock_trackers.nonfourcardhand then
        unlock_party_joker('j_square')
    end
    if G.GAME.miss_unlock_trackers.allpairs then
        unlock_party_joker('j_duo')
    end
    if G.GAME.miss_unlock_trackers.allthrees then
        unlock_party_joker('j_trio')
    end
    if G.GAME.miss_unlock_trackers.allfours then
        unlock_party_joker('j_family')
    end
    if G.GAME.miss_unlock_trackers.allflushes then
        unlock_party_joker('j_tribe')
    end
    if G.GAME.miss_unlock_trackers.allstraights then
        unlock_party_joker('j_order')
    end
    local steel_tally = 0
    for k, v in pairs(G.playing_cards) do
        if SMODS.has_enhancement(v, 'm_steel') then steel_tally = steel_tally + 1 end
    end
    if steel_tally >= 20 then
        unlock_party_joker('j_steel_joker')
    end
    local cavendished = false
    for i = 1, #G.jokers.cards do
        if G.jokers.cards[i] and G.jokers.cards[i].config and G.jokers.cards[i].config.center and (G.jokers.cards[i].config.center.key == 'j_cavendish') then
            cavendished = true
            break
        end
    end
    if cavendished then
        unlock_party_joker('j_gros_michel')
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.GAME.dollars = G.GAME.dollars + mod'''
position = 'after'
payload = '''   if G.GAME.modifiers.mission then
    if to_big then
        if to_big(G.GAME.dollars) >= to_big(300) then
            unlock_party_joker('j_business')
        elseif to_big(G.GAME.dollars) <= to_big(-40) then
            unlock_party_joker('j_credit_card')
        end
    else
        if G.GAME.dollars >= 300 then
            unlock_party_joker('j_business')
        elseif G.GAME.dollars <= -40 then
            unlock_party_joker('j_credit_card')
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''function level_up_hand(card, hand, instant, amount)'''
position = 'after'
payload = '''   if G.GAME.modifiers.mission then
    if to_big then
        if to_big(math.max(0, G.GAME.hands[hand].level + (amount or 1))) >= to_big(40) then
            unlock_party_joker('j_space')
        end
    else
        if math.max(0, G.GAME.hands[hand].level + (amount or 1)) >= 40 then
            unlock_party_joker('j_space')
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.blind and G.boss_throw_hand and self.STATE == self.STATES.SELECTING_HAND then'''
position = 'before'
payload = '''if (G.GAME and G.GAME.modifiers and (G.GAME.modifiers.mission == 2)) and G.jokers then
    for i = 1, #G.jokers.cards do
        if G.jokers.cards[i] and not (G.jokers.cards[i].ability.eternal or G.jokers.cards[i].ability.miss_defended) and not G.jokers.cards[i].ability.death_timer then
            G.jokers.cards[i].ability.death_timer = 3
        end
    end
    for i = 1, #G.consumeables.cards do
        if G.consumeables.cards[i] and not (G.consumeables.cards[i].ability.eternal or G.consumeables.cards[i].ability.miss_defended) and not G.consumeables.cards[i].ability.death_timer then
            G.consumeables.cards[i].ability.death_timer = 3
        end
    end
end
if G.GAME.miss_round_update and (#G.GAME.miss_funds > 0) then
    for i = #G.GAME.miss_funds, 1, -1 do
        G.GAME.miss_funds[i][2] = G.GAME.miss_funds[i][2] - 1
        if G.GAME.miss_funds[i][2] <= 0 then
            G.GAME.dollars = G.GAME.dollars - G.GAME.miss_funds[i][1]
            G.GAME.miss_funds.curr_dollars = G.GAME.miss_funds.curr_dollars - G.GAME.miss_funds[i][1]
            table.remove(G.GAME.miss_funds, i)
        end
    end
end
if G.GAME.miss_round_update or G.GAME.miss_hand_update then
    for i = #G.jokers.cards, 1, -1 do
        if G.jokers.cards[i] and not (G.jokers.cards[i].ability.eternal or G.jokers.cards[i].ability.miss_defended) and G.jokers.cards[i].ability.death_timer then
            G.jokers.cards[i].ability.death_timer = (G.jokers.cards[i].ability.death_timer or 3) - 1
            if G.jokers.cards[i].ability.death_timer == 0 then
                G.jokers.cards[i]:remove()
            end
        end
    end
    for i = #G.consumeables.cards, 1, -1 do
        if G.consumeables.cards[i] and not (G.consumeables.cards[i].ability.eternal or G.consumeables.cards[i].ability.miss_defended) and G.consumeables.cards[i].ability.consumeable and G.consumeables.cards[i].ability.death_timer then
            G.consumeables.cards[i].ability.death_timer = (G.consumeables.cards[i].ability.death_timer or 3) - 1
            if G.consumeables.cards[i].ability.death_timer == 0 then
                G.consumeables.cards[i]:remove()
            end
        end
    end
end
G.GAME.miss_round_update = nil
G.GAME.miss_hand_update = nil
if false and (G.GAME and G.GAME.modifiers and (G.GAME.modifiers.mission == 2)) and (G.GAME.miss_funds.curr_dollars ~= G.GAME.dollars) then
    local change = G.GAME.dollars - G.GAME.miss_funds.curr_dollars
    G.GAME.miss_funds.curr_dollars = G.GAME.dollars
    if to_big then
        change = to_big(change)
        if change > to_big(0) then
            G.GAME.miss_funds[#G.GAME.miss_funds + 1] = {change, 3}
        else
            while (change < to_big(0)) and (#G.GAME.miss_funds > 0) do
                if -change >= to_big(G.GAME.miss_funds[#G.GAME.miss_funds][1]) then
                    change = change + G.GAME.miss_funds[1][1]
                    table.remove(G.GAME.miss_funds, 1)
                else
                    G.GAME.miss_funds[1][1] = to_big(G.GAME.miss_funds[1][1]) + change
                    change = to_big(0)
                end
            end
        end
    else
        if change > 0 then
            G.GAME.miss_funds[#G.GAME.miss_funds + 1] = {change, 3}
        else
            while (change < 0) and (#G.GAME.miss_funds > 0) do
                if -change >= G.GAME.miss_funds[1][1] then
                    change = change + G.GAME.miss_funds[1][1]
                    table.remove(G.GAME.miss_funds, 1)
                else
                    G.GAME.miss_funds[1][1] = G.GAME.miss_funds[1][1] + change
                    change = 0
                end
            end
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''--Fill all remaining info if this is the main desc'''
position = 'before'
payload = '''if G.GAME and G.GAME.blind and (G.GAME.blind.name == "Existential Eraser") and not G.GAME.blind.disabled then
    if card and card.ability and card.ability.death_timer then info_queue[#info_queue+1] = {key = 'death_timer_hands', set = 'Other', vars = {card.ability.death_timer}} end
else
    if card and card.ability and card.ability.death_timer then info_queue[#info_queue+1] = {key = 'death_timer', set = 'Other', vars = {card.ability.death_timer}} end
end
if G.GAME and G.GAME.joker_tooltips and card and card.playing_card and G.GAME.joker_tooltips['j_hanging_chad'].active then info_queue[#info_queue+1] = {key = 'times_triggered', set = 'Other', vars = {card.ability.times_triggered or 0}} end
if G.GAME and G.GAME.joker_tooltips and card and card.ability and (card.ability.set == "Joker") and G.GAME.joker_tooltips['j_faceless'].active then 
    if jokers_with_face[_c.key] then
        info_queue[#info_queue+1] = {key = 'has_face', set = 'Other'}
    else
        info_queue[#info_queue+1] = {key = 'has_no_face', set = 'Other'}
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.draw_from_play_to_discard()'''
position = 'after'
payload = '''if G.GAME and G.GAME.blind and (G.GAME.blind.name == "Existential Eraser") and not G.GAME.blind.disabled then
    G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = function()
            G.GAME.miss_hand_update = true
            return true
        end
    }))
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.hands[text].played = G.GAME.hands[text].played + 1'''
position = 'before'
payload = '''if #scoring_hand ~= 5 then
    G.GAME.miss_unlock_trackers.nonfivecardhand = true
end
if (#G.play.cards ~= 4) and not (G.GAME.blind and (G.GAME.blind.name == "The Psychic")) then
    G.GAME.miss_unlock_trackers.nonfourcardhand = true
end
if poker_hands['Pair'] and next(poker_hands['Pair']) then
    G.GAME.miss_unlock_trackers.nopairhands = nil
end
if text ~= 'Pair' then
    G.GAME.miss_unlock_trackers.allpairs = nil
end
if text ~= 'Three of a Kind' then
    G.GAME.miss_unlock_trackers.allthrees = nil
end
if (text ~= 'Four of a Kind') and (G.GAME.round_resets.ante > 2) then
    G.GAME.miss_unlock_trackers.allfours = nil
end
if text ~= 'Flush' then
    G.GAME.miss_unlock_trackers.allflushes = nil
end
if text ~= 'Straight' then
    G.GAME.miss_unlock_trackers.allstraights = nil
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''ease_dollars(self.sell_cost)'''
position = 'after'
payload = '''local cost = self.sell_cost
if (self.ability.set == "Joker") then
    G.GAME.miss_unlock_trackers.jokerssold = true
    G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = function()
            if (cost >= 60) then
                unlock_party_joker('j_egg')
            end
            return true
        end
    }))
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'back.lua'
pattern = '''name_to_check == 'Challenge Deck' and UIBox_button({button = 'deck_view_challenge', label = {localize(challenge.id, 'challenge_names')},  minw = 2.2, minh = 1, scale = 0.6, id = challenge})'''
position = 'after'
payload = '''or (name_to_check == 'Mission Deck') and UIBox_button({button = 'add_joker_ui', label = {localize('b_miss_locked_jokers')},  minw = 2.2, minh = 1, scale = 0.6, id = 'no_adding_jokers'})'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''if self == G.jokers then'''
position = 'after'
payload = '''   if G.GAME.modifiers and G.GAME.modifiers.mission and G.GAME.miss_unlock_trackers.nofacedjokers then
        if card and card.config and card.config.center and card.config.center.key and jokers_with_face[card.config.center.key] then
            G.GAME.miss_unlock_trackers.nofacedjokers = nil
        end
    end
    if G.GAME.modifiers and G.GAME.modifiers.mission and G.GAME.miss_unlock_trackers.nononcommonjokers then
        if card and card.config and card.config.center and (card.config.center.rarity ~= 1)  then
            G.GAME.miss_unlock_trackers.nononcommonjokers = nil
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''local ret = {}'''
position = 'after'
payload = '''if card.playing_card and context.main_scoring and not card.debuff and (card.area == G.play) then
    if not card.ability.times_triggered then
        card.ability.times_triggered = 1
    else
        card.ability.times_triggered = card.ability.times_triggered + 1
        if (card.ability.times_triggered >= 50) and not G.GAME.won then
            G.E_MANAGER:add_event(Event({
                trigger = 'immediate',
                func = function()
                    unlock_party_joker('j_hanging_chad')
                    return true
                end
            }))
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.name == 'To Do List' and context.scoring_name == self.ability.to_do_poker_hand then'''
position = 'before'
payload = '''if true and (self.ability.name == 'To Do List' and context.scoring_name == self.ability.to_do_poker_hand) then
    if not self.ability.miss_successive then
        self.ability.miss_successive = 0
    end
    self.ability.miss_successive = self.ability.miss_successive + 1
    if self.ability.miss_successive >= 10 then
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
                unlock_party_joker('j_todo_list')
                return true
            end
        }))
    end
elseif self.ability.name == 'To Do List' then
    self.ability.miss_successive = 0
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''check_for_unlock({type = 'hand_contents', cards = G.play.cards})'''
position = 'after'
payload = '''local left_play = 0
for i = 1, #G.play.cards do
    if G.play.cards[i].ability.miss_infected then
        local card = G.play.cards[i]
        if pseudorandom('infected') < 0.5 then
            local change = pseudorandom('infected_change')
            G.E_MANAGER:add_event(Event({
                trigger = 'immediate',
                func = function()
                    card:flip()
                    return true
                end
            }))
            delay(0.3)
            G.E_MANAGER:add_event(Event({
                trigger = 'immediate',
                func = function()
                    play_sound('tarot1', math.random()*0.1 + 0.55, 0.42)
                    if change < 0.25 then
                        SMODS.modify_rank(card, 1)
                    elseif change < 0.5 then
                        SMODS.modify_rank(card, -1)
                    else
                        local suits = {}
                        for i2, j2 in pairs(SMODS.Suits) do
                            if (card.base.suit ~= i2) and (not j2.in_pool or j2:in_pool()) then
                                table.insert(suits, i2)
                            end
                        end
                        local suit = pseudorandom_element(suits, pseudoseed('infected_change_suit'))
                        SMODS.change_base(card, suit)
                    end
                    card:juice_up()
                    return true
                end
            }))
            delay(0.3)
            G.E_MANAGER:add_event(Event({
                trigger = 'immediate',
                func = function()
                    card:flip()
                    return true
                end
            }))
        elseif (pseudorandom('infected') < 0.4) and (left_play < #G.play.cards - 1) then
            draw_card(G.play, G.hand, i*100/#G.play.cards, 'up', nil, card)
            left_play = left_play + 1
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.set == "Joker" then'''
position = 'before'
payload = '''if (self.ability.set == "Joker") and self.ability.miss_infected and (pseudorandom('infected') < 0.5) then
    return
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''function copy_card(other, new_card, card_scale, playing_card, strip_edition)'''
position = 'after'
payload = '''if new_card and new_card.ability then
    new_card.ability.miss_infected = nil
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''elseif G.GAME.won then'''
position = 'before'
payload = '''elseif mission_colors and G.GAME.won then 
    ease_background_colour{new_colour = mission_colors[2], contrast = 1}
elseif mission_colors and (blindname == 'Small Blind' or blindname == 'Big Blind' or blindname == '') then
    ease_background_colour{new_colour = mission_colors[1], contrast = 1}'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''--For the blind related colours'''
position = 'before'
payload = '''local mission_colors = nil
if G.GAME and G.GAME.modifiers and G.GAME.modifiers.mission then
    if G.GAME.modifiers.mission == 1 then
        mission_colors = {HEX("847150"), HEX("ca6125")}
    elseif G.GAME.modifiers.mission == 2 then
        mission_colors = {HEX("5b8450"), HEX("31501a")}
    elseif G.GAME.modifiers.mission == 3 then
        mission_colors = {HEX("545084"), HEX("4343bc")}
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''c1.area:remove_card(c1)'''
position = "before"
payload = '''if G.shop and c1.ability and (c1.ability.set == "Joker") then
    G.GAME.miss_unlock_trackers.joker_purchased = true
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''ease_dollars(G.GAME.current_round.dollars)'''
position = 'before'
payload = '''local total_dollars = G.GAME.current_round.dollars - (G.GAME.investment_dollars or 0)
G.GAME.investment_dollars = nil
if to_big and (to_big(total_dollars) >= to_big(50)) then
    unlock_party_joker('j_golden')
elseif not to_big and (total_dollars >= 50) then
    unlock_party_joker('j_golden')
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:use_consumeable(area, copier)'''
position = 'after'
payload = '''   if self.ability.set == "Spectral" then
        if not G.GAME.miss_unlock_trackers.used_spectrals then
           G.GAME.miss_unlock_trackers.used_spectrals = {count = 0}
        end
        if not G.GAME.miss_unlock_trackers.used_spectrals[self.config.center.key] then
            G.GAME.miss_unlock_trackers.used_spectrals[self.config.center.key] = true
            G.GAME.miss_unlock_trackers.used_spectrals.count = G.GAME.miss_unlock_trackers.used_spectrals.count + 1
            if (G.GAME.miss_unlock_trackers.used_spectrals.count >= 6) and not G.GAME.won then
                unlock_party_joker('j_cartomancer')
            end
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'tag.lua'
pattern = '''G.GAME.last_blind and G.GAME.last_blind.boss then'''
position = 'after'
payload = '''G.GAME.investment_dollars = (G.GAME.investment_dollars or 0) + self.config.dollars'''
match_indent = true